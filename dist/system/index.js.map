{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"/source/","sourcesContent":["import through from \"through2\";\nimport gutil from \"gulp-util\";\nimport fs from \"graceful-fs\";\nimport deepExtend from \"deep-extend\";\nimport File from \"vinyl\";\nimport {getExtension, hashFromString} from \"./utils\";\n\nconst minimist = require(\"minimist\");\n\nlet knownOptions = {\n  string: \"env\",\n  default: {\n    env: process.env.NODE_ENV || \"production\",\n    verbose: false,\n  },\n};\n\nlet cmdOptions = minimist(process.argv.slice(2), knownOptions);\n\nlet PluginError = gutil.PluginError;\nconst PLUGIN_NAME = \"gulp-i18n-esn\";\n\nexport class Plugin{\n\n  registry = [];\n  values = {};\n  nodes = {};\n\n  constructor(opts){\n    if(opts) Object.assign(this, opts);\n  }\n\n  /**\n   * Figures out how to parse the data based on file extension.\n   *\n   * @param path          path to the file\n   * @param data          data of the file\n   * @returns {Promise}   resolved when data has been parsed\n   */\n  parseTranslations(path, data){\n    let ext = getExtension(path);\n\n    switch(ext){\n      case \"html\":\n        if(cmdOptions.verbose) gutil.log(\"parse HTML:\", path);\n        return this.parseHTML(data);\n      default:\n        if(cmdOptions.verbose) gutil.log(\"parse JS:\", path);\n        return this.parseJavaScript(path);\n    }\n  }\n\n  parseJavaScript(path){\n    let pos = path.lastIndexOf(\".\");\n    if(pos > -1) path = path.substr(0, pos);\n\n    return System.import(path).then(mod=>{\n      return mod.translations;\n    });\n  }\n\n  /**\n   * Parse and add keys to the registry.\n   * @param keys\n   */\n  addToRegistry(lang, data){\n    if(!this.registry[lang]) this.registry[lang] = {};\n\n    deepExtend(this.registry[lang], data);\n  }\n\n  generateAllTranslations(){\n    if(cmdOptions.verbose) {\n      gutil.log(\"extracted registry:\");\n      gutil.log(this.registry);\n    }\n\n    for(let lang in this.registry){\n      if(!this.registry.hasOwnProperty(lang)) continue;\n      this.generateTranslation(lang, this.registry[lang]);\n    }\n  }\n\n  generateTranslation(lang){\n    this.registryHash = {};\n\n    let translation = this.registry[lang];\n\n    // turn the array of keys\n    // into an associative object\n    // ==========================\n    for(let key in translation){\n      if(!translation.hasOwnProperty(key)) continue;\n      this.registryHash = hashFromString(key, translation[key], this.keySeparator, this.registryHash);\n    }\n\n    // push files back to the stream\n    let file = new File({\n      path: `translations-${lang}.json`,\n      // base: locale,\n      contents: new Buffer(JSON.stringify(this.registryHash, null, 2)),\n    });\n    this.stream.push(file);\n  }\n\n\n  // --------- Stream functions\n\n  parse(){\n    return this.stream = through.obj(this.transformFile.bind(this), this.flush.bind(this));\n  }\n\n  transformFile(file, encoding, done){\n    let data, path;\n\n    // we do not handle streams\n    if (file.isStream()) {\n      this.emit(\"error\", new PluginError(PLUGIN_NAME, \"Streams are not supported!\"));\n      return done();\n    }\n\n    // read the file manually if a filepath was passed.\n    if(file.isNull()){\n      path = file.path;\n      if(file.stat.isDirectory()){\n        return done();\n      }else if(path && fs.existsSync(path)){\n        data = fs.readFileSync(path);\n      }else{\n        this.emit(\"error\", new PluginError(PLUGIN_NAME, \"File has no content and is not readable\"));\n        return done();\n      }\n    }\n\n    let segments = file.path.split(\"/\");\n    let lang = segments[segments.length - 2];\n\n    if (file.isBuffer()) {\n      path = file.path.replace(process.cwd() + \"/\", \"\");\n      data = file.contents.toString();\n    }\n\n    // skip if no data was found\n    if(!data) return done();\n\n    this.parseTranslations(path, data).then(trans=>{\n      this.addToRegistry(lang, trans);\n      // tell the stream engine that we are done with this file\n      done();\n    });\n  }\n\n  flush(cb){\n    // extract values from the aurelia application where possible\n    this.generateAllTranslations();\n    cb();\n  }\n}\n\n/**\n * The main plugin function\n *\n * @param opts\n * @returns {Stream}\n */\nexport function i18n(opts) {\n  return new Plugin(opts).parse();\n}\n"]}