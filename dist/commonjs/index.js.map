{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"/source/","sourcesContent":["import through from \"through2\";\nimport gutil from \"gulp-util\";\nimport fs from \"graceful-fs\";\nimport deepExtend from \"deep-extend\";\nimport File from \"vinyl\";\nimport {getExtension, hashFromString} from \"./utils\";\n\nconst minimist = require(\"minimist\");\n\nlet knownOptions = {\n  string: \"env\",\n  default: {\n    env: process.env.NODE_ENV || \"production\",\n    verbose: false,\n  },\n};\n\nlet cmdOptions = minimist(process.argv.slice(2), knownOptions);\n\nlet PluginError = gutil.PluginError;\nconst PLUGIN_NAME = \"gulp-i18n-esn\";\n\nexport class Plugin{\n\n  registry = [];\n  values = {};\n  nodes = {};\n\n  constructor(opts){\n    if(opts) Object.assign(this, opts);\n  }\n\n  /**\n   * Figures out how to parse the data based on file extension.\n   *\n   * @param path          path to the file\n   * @param data          data of the file\n   * @returns {Promise}   resolved when data has been parsed\n   */\n  parseTranslations(path, data){\n    let ext = getExtension(path);\n\n    switch(ext){\n      case \"html\":\n        if(cmdOptions.verbose) gutil.log(\"parse HTML:\", path);\n        return this.parseHTML(data);\n      default:\n        if(cmdOptions.verbose) gutil.log(\"parse JS:\", path);\n        return this.parseJavaScript(path);\n    }\n  }\n\n  parseJavaScript(path){\n    let pos = path.lastIndexOf(\".\");\n    if(pos > -1) path = path.substr(0, pos);\n\n    return System.import(path).then(mod=>{\n      return mod.translations;\n    });\n  }\n\n  /**\n   * Parse and add keys to the registry.\n   * @param keys\n   */\n  addToRegistry(lang, data){\n    if(!this.registry[lang]) this.registry[lang] = {};\n\n    deepExtend(this.registry[lang], data);\n  }\n\n  generateAllTranslations(){\n    if(cmdOptions.verbose) {\n      gutil.log(\"extracted registry:\");\n      gutil.log(this.registry);\n    }\n\n    for(let lang in this.registry){\n      if(!this.registry.hasOwnProperty(lang)) continue;\n      this.generateTranslation(lang, this.registry[lang]);\n    }\n  }\n\n  generateTranslation(lang){\n    this.registryHash = {};\n\n    let translation = this.registry[lang];\n\n    // turn the array of keys\n    // into an associative object\n    // ==========================\n    for(let key in translation){\n      if(!translation.hasOwnProperty(key)) continue;\n      this.registryHash = hashFromString(key, translation[key], this.keySeparator, this.registryHash);\n    }\n\n    // push files back to the stream\n    let file = new File({\n      path: `translations-${lang}.json`,\n      // base: locale,\n      contents: new Buffer(JSON.stringify(this.registryHash, null, 2)),\n    });\n    this.stream.push(file);\n  }\n\n\n  // --------- Stream functions\n\n  parse(){\n    return this.stream = through.obj(this.transformFile.bind(this), this.flush.bind(this));\n  }\n\n  transformFile(file, encoding, done){\n    let data, path;\n\n    // we do not handle streams\n    if (file.isStream()) {\n      this.emit(\"error\", new PluginError(PLUGIN_NAME, \"Streams are not supported!\"));\n      return done();\n    }\n\n    // read the file manually if a filepath was passed.\n    if(file.isNull()){\n      path = file.path;\n      if(file.stat.isDirectory()){\n        return done();\n      }else if(path && fs.existsSync(path)){\n        data = fs.readFileSync(path);\n      }else{\n        this.emit(\"error\", new PluginError(PLUGIN_NAME, \"File has no content and is not readable\"));\n        return done();\n      }\n    }\n\n    let segments = file.path.split(\"/\");\n    let lang = segments[segments.length - 2];\n\n    if (file.isBuffer()) {\n      path = file.path.replace(process.cwd() + \"/\", \"\");\n      data = file.contents.toString();\n    }\n\n    // skip if no data was found\n    if(!data) return done();\n\n    this.parseTranslations(path, data).then(trans=>{\n      this.addToRegistry(lang, trans);\n      // tell the stream engine that we are done with this file\n      done();\n    });\n  }\n\n  flush(cb){\n    // extract values from the aurelia application where possible\n    this.generateAllTranslations();\n    cb();\n  }\n}\n\n/**\n * The main plugin function\n *\n * @param opts\n * @returns {Stream}\n */\nexport function i18n(opts) {\n  return new Plugin(opts).parse();\n}\n"]}